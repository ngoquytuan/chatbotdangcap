# verify_embeddings.py
import sqlite3
import json
import logging
from pathlib import Path
from colorama import Fore, Style, init as colorama_init

# ==== CONFIG ====
DB_PATH = "rag_system/data/metadata.db"

# ==== INIT COLOR LOG ====
colorama_init(autoreset=True)
logging.basicConfig(level=logging.INFO, format="%(message)s")

def log_info(msg):
    logging.info(Fore.CYAN + msg + Style.RESET_ALL)

def log_success(msg):
    logging.info(Fore.GREEN + msg + Style.RESET_ALL)

def log_warn(msg):
    logging.warning(Fore.YELLOW + msg + Style.RESET_ALL)

def log_error(msg):
    logging.error(Fore.RED + msg + Style.RESET_ALL)

def verify_embedding_format():
    """
    Ki·ªÉm tra c·ªôt 'embedding' trong b·∫£ng 'chunks' ƒë·ªÉ x√°c th·ª±c r·∫±ng
    t·∫•t c·∫£ d·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u d∆∞·ªõi d·∫°ng chu·ªói JSON h·ª£p l·ªá.
    """
    log_info(f"üîç B·∫Øt ƒë·∫ßu ki·ªÉm tra ƒë·ªãnh d·∫°ng embedding trong '{DB_PATH}'...")

    db_file = Path(DB_PATH)
    if not db_file.exists():
        log_error(f"‚ùå Kh√¥ng t√¨m th·∫•y file database t·∫°i: {DB_PATH}")
        return

    try:
        conn = sqlite3.connect(DB_PATH)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        # L·∫•y t·∫•t c·∫£ c√°c chunk ƒë·ªÉ ki·ªÉm tra
        cursor.execute("SELECT chunk_id, embedding FROM chunks")
        rows = cursor.fetchall()
    except Exception as e:
        log_error(f"‚ùå L·ªói khi k·∫øt n·ªëi ho·∫∑c ƒë·ªçc d·ªØ li·ªáu t·ª´ database: {e}")
        return
    finally:
        if 'conn' in locals() and conn:
            conn.close()

    if not rows:
        log_warn("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu trong database ƒë·ªÉ ki·ªÉm tra.")
        return

    total_chunks = len(rows)
    invalid_embeddings = 0
    
    log_info(f"üî¨ ƒêang ki·ªÉm tra {total_chunks} chunks...")

    for row in rows:
        chunk_id = row['chunk_id']
        embedding_data = row['embedding']
        
        # Th·ª≠ ph√¢n t√≠ch chu·ªói JSON
        try:
            # Ki·ªÉm tra xem c√≥ ph·∫£i l√† chu·ªói kh√¥ng
            if not isinstance(embedding_data, str):
                raise TypeError("D·ªØ li·ªáu kh√¥ng ph·∫£i l√† chu·ªói (string).")
            # Th·ª≠ parse JSON
            parsed_embedding = json.loads(embedding_data)
            # Ki·ªÉm tra xem k·∫øt qu·∫£ c√≥ ph·∫£i l√† list kh√¥ng
            if not isinstance(parsed_embedding, list):
                 raise TypeError("D·ªØ li·ªáu JSON sau khi parse kh√¥ng ph·∫£i l√† list.")

        except (json.JSONDecodeError, TypeError) as e:
            invalid_embeddings += 1
            log_warn(f"  - L·ªói chunk '{chunk_id}': ƒê·ªãnh d·∫°ng embedding kh√¥ng h·ª£p l·ªá. L·ªói: {e}")

    log_info("-" * 40)
    log_info("üìä **K·∫æT QU·∫¢ KI·ªÇM TRA**")
    log_info(f"  - T·ªïng s·ªë chunks ƒë√£ ki·ªÉm tra: {total_chunks}")
    
    if invalid_embeddings == 0:
        log_success(f"  ‚úî T·∫•t c·∫£ {total_chunks} embeddings ƒë·ªÅu h·ª£p l·ªá v√† ƒë∆∞·ª£c l∆∞u d∆∞·ªõi d·∫°ng JSON.")
        log_success("‚úÖ Bug ƒë√£ ƒë∆∞·ª£c kh·∫Øc ph·ª•c ho√†n to√†n!")
    else:
        log_error(f"  ‚úñ T√¨m th·∫•y {invalid_embeddings} embedding kh√¥ng h·ª£p l·ªá.")
        log_error("üî• Bug v·∫´n c√≤n t·ªìn t·∫°i ho·∫∑c d·ªØ li·ªáu c≈© ch∆∞a ƒë∆∞·ª£c d·ªçn d·∫πp!")

if __name__ == "__main__":
    verify_embedding_format()